# Rails will assume you have a psql superuser matching your system user
# This may be an issue when using a local postgres instance.
# configure with:
# `sudo -u postgres createuser ${USER}`
# `sudo -u postgres alter user ${USER} superuser
default: &default
  adapter: postgresql
  encoding: unicode
  timeout: 5000
  username: <%= ENV['DB_USER'] || 'postgres' %>
  password: <%= ENV['DB_PASSWORD'] || 'mysecretpassword' %>
  host: <%= ENV['DB_HOST'] || 'localhost' %>
  # For details on connection pooling, see Rails configuration guide
  # https://guides.rubyonrails.org/configuring.html#database-pooling
  pool: <%= ENV.fetch('PUMA_MAX_THREADS') { 5 } %>


development:
  <<: *default
  database: jupiter_development

# Warning: The database defined as "test" will be erased and
# re-generated from your development database when you run "rake".
# Do not set this db to the same as development or production.
test:
  <<: *default
  database: jupiter_test

# As with config/secrets.yml, you never want to store sensitive information,
# like your database password, in your source code. If your source code is
# ever seen by anyone, they now have access to your database.
#
# Instead, provide the password as a unix environment variable when you boot
# the app. Read http://guides.rubyonrails.org/configuring.html#configuring-a-database
# for a full rundown on how to provide these environment variables in a
# production deployment.
#
# On Heroku and other platform providers, you may have a full connection URL
# available as an environment variable. For example:
#
#   DATABASE_URL="mysql2://myuser:mypass@localhost/somedatabase"
#
# You can use this database configuration with:
#
#   production:
#     url: <%= ENV['DATABASE_URL'] %>
#
uat:
  url: <%= Rails.application.secrets.database_url %>
staging:
  url: <%= Rails.application.secrets.database_url %>
production:
  url: <%= Rails.application.secrets.database_url %>
